#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "exa"
require "exa/cli/base"
require "exa/cli/formatters/contents_formatter"

# Parse command line arguments
def parse_args(args)
  ids = []
  api_key = nil
  text = false
  highlights = false
  summary = false
  output_format = nil

  i = 0
  while i < args.length
    arg = args[i]

    case arg
    when "--api-key"
      i += 1
      api_key = args[i]
    when "--text"
      text = true
    when "--highlights"
      highlights = true
    when "--summary"
      summary = true
    when "--output-format"
      i += 1
      output_format = args[i]
    when "--help", "-h"
      print_help
      exit 0
    else
      # First non-flag argument is the IDs (comma-separated or single)
      if ids.empty?
        ids_arg = arg
        ids = ids_arg.include?(",") ? ids_arg.split(",").map(&:strip) : [ids_arg]
      end
    end

    i += 1
  end

  { ids: ids, api_key: api_key, text: text, highlights: highlights, summary: summary, output_format: output_format }
end

def print_help
  puts "Exa Get-Contents - Retrieve page contents"
  puts ""
  puts "Usage: exa-api get-contents <ids> [options]"
  puts ""
  puts "Arguments:"
  puts "  ids                    Comma-separated list of IDs or URLs (required)"
  puts ""
  puts "Options:"
  puts "  --text                 Include page text in response"
  puts "  --highlights           Include highlights in response"
  puts "  --summary              Include summary in response"
  puts "  --api-key KEY          Exa API key (or set EXA_API_KEY env var)"
  puts "  --output-format FMT    Output format: json, pretty, or text (default: json)"
  puts "  --help, -h             Show this help message"
  puts ""
  puts "Examples:"
  puts "  exa-api get-contents 'https://example.com'"
  puts "  exa-api get-contents 'id1,id2,id3' --text"
  puts "  exa-api get-contents 'https://example.com' --highlights --output-format pretty"
end

begin
  # Parse arguments
  options = parse_args(ARGV)

  # Validate IDs
  if options[:ids].empty?
    puts "Error: IDs argument required"
    puts ""
    puts "Run 'exa-api get-contents --help' for usage information."
    exit 1
  end

  # Resolve API key
  api_key = Exa::CLI::Base.resolve_api_key(options[:api_key])

  # Resolve output format
  output_format = Exa::CLI::Base.resolve_output_format(options[:output_format])

  # Build client
  client = Exa::CLI::Base.build_client(api_key)

  # Build request parameters
  params = {}
  params[:text] = true if options[:text]
  params[:highlights] = true if options[:highlights]
  params[:summary] = true if options[:summary]

  # Call API
  result = client.get_contents(options[:ids], **params)

  # Format and output
  output = Exa::CLI::Formatters::ContentsFormatter.format(result, output_format)
  puts output
rescue Exa::Error => e
  puts "Error: #{e.message}"
  exit 1
rescue StandardError => e
  puts "Unexpected error: #{e.message}"
  puts e.backtrace.first(5) if ENV["DEBUG"]
  exit 1
end
