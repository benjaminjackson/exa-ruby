#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "exa"
require "exa/cli/base"
require "exa/cli/formatters/contents_formatter"

# Parse command line arguments
def parse_args(args)
  ids = []
  api_key = nil
  text = false
  text_max_characters = nil
  include_html_tags = false
  summary = false
  summary_query = nil
  summary_schema = nil
  subpages = nil
  subpage_target = []
  links = nil
  image_links = nil
  context = false
  context_max_characters = nil
  livecrawl_timeout = nil
  output_format = nil

  i = 0
  while i < args.length
    arg = args[i]

    case arg
    when "--api-key"
      i += 1
      api_key = args[i]
    when "--text"
      text = true
      i += 1
    when "--text-max-characters"
      i += 1
      text_max_characters = args[i].to_i
    when "--include-html-tags"
      include_html_tags = true
      i += 1
    when "--summary"
      summary = true
      i += 1
    when "--summary-query"
      i += 1
      summary_query = args[i]
    when "--summary-schema"
      i += 1
      schema_arg = args[i]
      summary_schema = if schema_arg.start_with?("@")
                         JSON.parse(File.read(schema_arg[1..]))
                       else
                         JSON.parse(schema_arg)
                       end
    when "--subpages"
      i += 1
      subpages = args[i].to_i
    when "--subpage-target"
      i += 1
      subpage_target << args[i]
    when "--links"
      i += 1
      links = args[i].to_i
    when "--image-links"
      i += 1
      image_links = args[i].to_i
    when "--context"
      context = true
      i += 1
    when "--context-max-characters"
      i += 1
      context_max_characters = args[i].to_i
    when "--livecrawl-timeout"
      i += 1
      livecrawl_timeout = args[i].to_i
    when "--output-format"
      i += 1
      output_format = args[i]
    when "--help", "-h"
      print_help
      exit 0
    else
      # First non-flag argument is the IDs (comma-separated or single)
      if ids.empty?
        ids_arg = arg
        ids = ids_arg.include?(",") ? ids_arg.split(",").map(&:strip) : [ids_arg]
      end
      i += 1
    end
  end

  {
    ids: ids,
    api_key: api_key,
    text: text,
    text_max_characters: text_max_characters,
    include_html_tags: include_html_tags,
    summary: summary,
    summary_query: summary_query,
    summary_schema: summary_schema,
    subpages: subpages,
    subpage_target: subpage_target,
    links: links,
    image_links: image_links,
    context: context,
    context_max_characters: context_max_characters,
    livecrawl_timeout: livecrawl_timeout,
    output_format: output_format
  }
end

# Build contents parameters from extracted flags
def build_contents_params(args)
  params = {}

  # Text options
  if args[:text]
    if args[:text_max_characters] || args[:include_html_tags]
      params[:text] = {}
      params[:text][:max_characters] = args[:text_max_characters] if args[:text_max_characters]
      params[:text][:include_html_tags] = args[:include_html_tags] if args[:include_html_tags]
    else
      params[:text] = true
    end
  end

  # Summary options
  if args[:summary]
    if args[:summary_query] || args[:summary_schema]
      params[:summary] = {}
      params[:summary][:query] = args[:summary_query] if args[:summary_query]
      params[:summary][:schema] = args[:summary_schema] if args[:summary_schema]
    else
      params[:summary] = true
    end
  end

  # Context options
  if args[:context]
    if args[:context_max_characters]
      params[:context] = { max_characters: args[:context_max_characters] }
    else
      params[:context] = true
    end
  end

  # Subpages options
  params[:subpages] = args[:subpages] if args[:subpages]
  params[:subpage_target] = args[:subpage_target] if args[:subpage_target].any?

  # Extras options
  if args[:links] || args[:image_links]
    params[:extras] = {}
    params[:extras][:links] = args[:links] if args[:links]
    params[:extras][:image_links] = args[:image_links] if args[:image_links]
  end

  # Livecrawl options
  params[:livecrawl_timeout] = args[:livecrawl_timeout] if args[:livecrawl_timeout]

  params.empty? ? nil : params
end

def print_help
  puts <<~HELP
    Usage: exa-api get-contents <urls> [options]

    Retrieve full page contents from URLs

    Arguments:
      urls                   Comma-separated list of URLs (required)

    Options:
      Text Extraction:
        --text                       Include page text in response
        --text-max-characters N      Max characters for page text
        --include-html-tags          Include HTML tags in text extraction

      Summary:
        --summary                    Include AI-generated summary
        --summary-query PROMPT       Custom prompt for summary generation
        --summary-schema FILE        JSON schema for summary structure (@file syntax)

      Context:
        --context                    Format results as context for LLM RAG
        --context-max-characters N   Max characters for context string

      Subpages:
        --subpages N                 Number of subpages to crawl
        --subpage-target PHRASE      Subpage target phrases (repeatable)

      Extras:
        --links N                    Number of links to extract per result
        --image-links N              Number of image links to extract

      Livecrawl:
        --livecrawl-timeout N        Timeout for livecrawling in milliseconds

      General:
        --api-key KEY                Exa API key (or set EXA_API_KEY env var)
        --output-format FMT          Output format: json, pretty, or text (default: json)
        --help, -h                   Show this help message

    Examples:
      exa-api get-contents 'https://example.com'
      exa-api get-contents 'https://example.com' --text
      exa-api get-contents 'https://example.com' --text --text-max-characters 3000 --include-html-tags
      exa-api get-contents 'url1,url2' --summary --summary-query "Be terse"
      exa-api get-contents 'https://example.com' --subpages 1 --subpage-target about
      exa-api get-contents 'https://example.com' --links 5 --image-links 10
  HELP
end

begin
  # Parse arguments
  options = parse_args(ARGV)

  # Validate IDs
  if options[:ids].empty?
    $stderr.puts "Error: URLs argument required"
    $stderr.puts ""
    $stderr.puts "Run 'exa-api get-contents --help' for usage information."
    exit 1
  end

  # Resolve API key
  api_key = Exa::CLI::Base.resolve_api_key(options[:api_key])

  # Resolve output format
  output_format = Exa::CLI::Base.resolve_output_format(options[:output_format])

  # Build client
  client = Exa::CLI::Base.build_client(api_key)

  # Build request parameters
  params = build_contents_params(options)
  params ||= {}

  # Call API
  result = client.get_contents(options[:ids], **params)

  # Format and output
  output = Exa::CLI::Formatters::ContentsFormatter.format(result, output_format)
  puts output
rescue Exa::ConfigurationError => e
  $stderr.puts "Configuration error: #{e.message}"
  exit 1
rescue Exa::Unauthorized => e
  $stderr.puts "Authentication error: #{e.message}"
  $stderr.puts "Check your API key (set EXA_API_KEY or use --api-key)"
  exit 1
rescue Exa::ClientError => e
  $stderr.puts "Client error: #{e.message}"
  exit 1
rescue Exa::ServerError => e
  $stderr.puts "Server error: #{e.message}"
  $stderr.puts "The Exa API may be experiencing issues. Please try again later."
  exit 1
rescue Exa::Error => e
  $stderr.puts "Error: #{e.message}"
  exit 1
rescue StandardError => e
  $stderr.puts "Unexpected error: #{e.message}"
  $stderr.puts e.backtrace.first(5) if ENV["DEBUG"]
  exit 1
end
