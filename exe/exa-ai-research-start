#!/usr/bin/env ruby
# frozen_string_literal: true

# Set up load paths
require "bundler/setup"
require "exa"

# Parse command-line arguments
def parse_args(argv)
  args = {
    output_format: "json",
    api_key: nil,
    events: false,
    wait: false
  }

  i = 0
  while i < argv.length
    arg = argv[i]
    case arg
    when "--instructions"
      args[:instructions] = argv[i + 1]
      i += 2
    when "--model"
      args[:model] = argv[i + 1]
      i += 2
    when "--output-schema"
      args[:output_schema] = argv[i + 1]
      i += 2
    when "--wait"
      args[:wait] = true
      i += 1
    when "--events"
      args[:events] = true
      i += 1
    when "--api-key"
      args[:api_key] = argv[i + 1]
      i += 2
    when "--output-format"
      args[:output_format] = argv[i + 1]
      i += 2
    when "--help", "-h"
      puts <<~HELP
        Usage: exa-api research-start --instructions "TEXT" [OPTIONS]

        Start a research task using Exa AI

        Options:
          --instructions TEXT   Research instructions (required)
          --model MODEL         Research model: exa-research (default), exa-research-pro, exa-research-fast
          --output-schema JSON  JSON schema string for structured output
          --wait                Wait for task to complete (polls until done)
          --events              Include event log in output (only with --wait)
          --api-key KEY         Exa API key (or set EXA_API_KEY env var)
          --output-format FMT   Output format: json, pretty, or text (default: json)
          --help, -h            Show this help message

        Examples:
          exa-api research-start --instructions "Find Ruby performance tips"
          exa-api research-start --instructions "Analyze AI trends" --wait --events
          exa-api research-start --instructions "Summarize papers" --model exa-research-pro --wait
          exa-api research-start --instructions "Find stats" --output-schema '{"type":"object"}'
      HELP
      exit 0
    else
      i += 1
    end
  end

  args
end

# Main execution
begin
  args = parse_args(ARGV)

  # Validate instructions
  if args[:instructions].nil? || args[:instructions].empty?
    $stderr.puts "Error: --instructions flag is required"
    $stderr.puts "Run 'exa-api research-start --help' for usage information"
    exit 1
  end

  # Resolve API key
  api_key = Exa::CLI::Base.resolve_api_key(args[:api_key])

  # Resolve output format
  output_format = Exa::CLI::Base.resolve_output_format(args[:output_format])

  # Build client
  client = Exa::CLI::Base.build_client(api_key)

  # Prepare research parameters
  research_params = { instructions: args[:instructions] }
  research_params[:model] = args[:model] if args[:model]

  # Parse output_schema as JSON if provided
  if args[:output_schema]
    begin
      research_params[:output_schema] = JSON.parse(args[:output_schema])
    rescue JSON::ParserError => e
      $stderr.puts "Error: Invalid JSON in --output-schema: #{e.message}"
      exit 1
    end
  end

  # Start research task
  task = client.research_start(**research_params)

  # If --wait flag is set, poll until task completes
  if args[:wait]
    $stderr.print "Starting research task... "

    begin
      final_task = Exa::CLI::Polling.poll(max_duration: 300, initial_delay: 2, max_delay: 10) do
        # Get current task status
        current_task = client.research_get(task.research_id, events: args[:events])

        # Show progress indicator
        case current_task.status
        when "pending"
          $stderr.print "⏳"
        when "running"
          $stderr.print "⚙️"
        end

        # Check if done
        done = current_task.finished?

        { done: done, result: current_task, status: current_task.status }
      end

      $stderr.puts " #{final_task.status.upcase}"

      # Format and output final result
      output = Exa::CLI::Formatters::ResearchFormatter.format_task(final_task, output_format, show_events: args[:events])
      puts output

      # Exit with error code if task failed
      exit 1 if final_task.failed?

    rescue Exa::CLI::Polling::TimeoutError => e
      $stderr.puts "\nError: Task did not complete within timeout period (5 minutes)"
      $stderr.puts "Task ID: #{task.research_id}"
      $stderr.puts "You can check the status later with: exa-api research-get #{task.research_id}"
      exit 1
    end
  else
    # Just return the initial task (with status "pending")
    output = Exa::CLI::Formatters::ResearchFormatter.format_task(task, output_format, show_events: false)
    puts output
  end

rescue Exa::ConfigurationError => e
  $stderr.puts "Configuration error: #{e.message}"
  exit 1
rescue Exa::Unauthorized => e
  $stderr.puts "Authentication error: #{e.message}"
  $stderr.puts "Check your API key (set EXA_API_KEY or use --api-key)"
  exit 1
rescue Exa::ClientError => e
  $stderr.puts "Client error: #{e.message}"
  exit 1
rescue Exa::ServerError => e
  $stderr.puts "Server error: #{e.message}"
  $stderr.puts "The Exa API may be experiencing issues. Please try again later."
  exit 1
rescue Exa::Error => e
  $stderr.puts "Error: #{e.message}"
  exit 1
rescue StandardError => e
  $stderr.puts "Unexpected error: #{e.message}"
  $stderr.puts e.backtrace.first(5) if ENV["DEBUG"]
  exit 1
end
