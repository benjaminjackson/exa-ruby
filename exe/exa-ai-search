#!/usr/bin/env ruby
# frozen_string_literal: true

# Set up load paths
require "bundler/setup"
require "exa"

# Parse command-line arguments
def parse_args(argv)
  args = {
    output_format: "json",
    api_key: nil
  }

  # Extract query (first non-flag argument)
  query_parts = []
  i = 0
  while i < argv.length
    arg = argv[i]
    case arg
    when "--num-results"
      args[:num_results] = argv[i + 1].to_i
      i += 2
    when "--type"
      args[:type] = argv[i + 1]
      i += 2
    when "--include-domains"
      args[:include_domains] = argv[i + 1].split(",").map(&:strip)
      i += 2
    when "--exclude-domains"
      args[:exclude_domains] = argv[i + 1].split(",").map(&:strip)
      i += 2
    when "--use-autoprompt"
      args[:use_autoprompt] = true
      i += 1
    when "--api-key"
      args[:api_key] = argv[i + 1]
      i += 2
    when "--output-format"
      args[:output_format] = argv[i + 1]
      i += 2
    when "--linkedin"
      linkedin_type = argv[i + 1]
      valid_types = ["company", "person", "all"]
      unless valid_types.include?(linkedin_type)
        $stderr.puts "Error: LinkedIn type must be one of: #{valid_types.join(', ')}"
        exit 1
      end
      args[:linkedin] = linkedin_type
      i += 2
    when "--help", "-h"
      puts <<~HELP
        Usage: exa-api search QUERY [OPTIONS]

        Search the web using Exa AI

        Arguments:
          QUERY                 Search query (required)

        Options:
          --num-results N       Number of results to return (default: 10)
          --type TYPE           Search type: keyword, neural, or auto (default: auto)
          --include-domains D   Comma-separated list of domains to include
          --exclude-domains D   Comma-separated list of domains to exclude
          --use-autoprompt      Use Exa's autoprompt feature
          --linkedin TYPE       Search LinkedIn: company, person, or all
          --api-key KEY         Exa API key (or set EXA_API_KEY env var)
          --output-format FMT   Output format: json, pretty, or text (default: json)
          --help, -h            Show this help message

        Examples:
          exa-api search "ruby programming"
          exa-api search "machine learning" --num-results 5 --type keyword
          exa-api search "Anthropic" --linkedin company
          exa-api search "Dario Amodei" --linkedin person
          exa-api search "AI" --linkedin all
          exa-api search "AI research" --include-domains arxiv.org,scholar.google.com
          exa-api search "tutorials" --output-format pretty
      HELP
      exit 0
    else
      query_parts << arg
      i += 1
    end
  end

  args[:query] = query_parts.join(" ")
  args
end

# Main execution
begin
  args = parse_args(ARGV)

  # Validate query
  if args[:query].nil? || args[:query].empty?
    $stderr.puts "Error: Query is required"
    $stderr.puts "Run 'exa-api search --help' for usage information"
    exit 1
  end

  # Resolve API key
  api_key = Exa::CLI::Base.resolve_api_key(args[:api_key])

  # Resolve output format
  output_format = Exa::CLI::Base.resolve_output_format(args[:output_format])

  # Build client
  client = Exa::CLI::Base.build_client(api_key)

  # Prepare search parameters
  search_params = {}
  search_params[:numResults] = args[:num_results] if args[:num_results]
  search_params[:type] = args[:type] if args[:type]
  search_params[:includeDomains] = args[:include_domains] if args[:include_domains]
  search_params[:excludeDomains] = args[:exclude_domains] if args[:exclude_domains]
  search_params[:useAutoprompt] = args[:use_autoprompt] if args[:use_autoprompt]

  # Execute search based on LinkedIn type
  result = case args[:linkedin]
           when "company"
             client.linkedin_company(args[:query], **search_params)
           when "person"
             client.linkedin_person(args[:query], **search_params)
           when "all"
             client.search(args[:query], includeDomains: ["linkedin.com"], **search_params)
           else
             client.search(args[:query], **search_params)
           end

  # Format and output result
  output = Exa::CLI::Formatters::SearchFormatter.format(result, output_format)
  puts output

rescue Exa::ConfigurationError => e
  $stderr.puts "Configuration error: #{e.message}"
  exit 1
rescue Exa::Unauthorized => e
  $stderr.puts "Authentication error: #{e.message}"
  $stderr.puts "Check your API key (set EXA_API_KEY or use --api-key)"
  exit 1
rescue Exa::ClientError => e
  $stderr.puts "Client error: #{e.message}"
  exit 1
rescue Exa::ServerError => e
  $stderr.puts "Server error: #{e.message}"
  $stderr.puts "The Exa API may be experiencing issues. Please try again later."
  exit 1
rescue Exa::Error => e
  $stderr.puts "Error: #{e.message}"
  exit 1
rescue StandardError => e
  $stderr.puts "Unexpected error: #{e.message}"
  $stderr.puts e.backtrace.first(5) if ENV["DEBUG"]
  exit 1
end
