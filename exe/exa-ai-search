#!/usr/bin/env ruby
# frozen_string_literal: true

# Set up load paths
require "bundler/setup"
require "exa"

# Parse command-line arguments
def parse_args(argv)
  args = {
    output_format: "json",
    api_key: nil
  }

  # Extract query (first non-flag argument)
  query_parts = []
  i = 0
  while i < argv.length
    arg = argv[i]
    case arg
    when "--num-results"
      args[:num_results] = argv[i + 1].to_i
      i += 2
    when "--type"
      args[:type] = argv[i + 1]
      i += 2
    when "--category"
      category = argv[i + 1]
      valid_categories = ["company", "research paper", "news", "pdf", "github", "tweet", "personal site", "linkedin profile", "financial report"]
      unless valid_categories.include?(category)
        $stderr.puts "Error: Category must be one of: #{valid_categories.map { |c| "\"#{c}\"" }.join(', ')}"
        exit 1
      end
      args[:category] = category
      i += 2
    when "--include-domains"
      args[:include_domains] = argv[i + 1].split(",").map(&:strip)
      i += 2
    when "--exclude-domains"
      args[:exclude_domains] = argv[i + 1].split(",").map(&:strip)
      i += 2
    when "--use-autoprompt"
      args[:use_autoprompt] = true
      i += 1
    when "--api-key"
      args[:api_key] = argv[i + 1]
      i += 2
    when "--output-format"
      args[:output_format] = argv[i + 1]
      i += 2
    when "--linkedin"
      linkedin_type = argv[i + 1]
      valid_types = ["company", "person", "all"]
      unless valid_types.include?(linkedin_type)
        $stderr.puts "Error: LinkedIn type must be one of: #{valid_types.join(', ')}"
        exit 1
      end
      args[:linkedin] = linkedin_type
      i += 2
    when "--start-published-date"
      args[:start_published_date] = argv[i + 1]
      i += 2
    when "--end-published-date"
      args[:end_published_date] = argv[i + 1]
      i += 2
    when "--start-crawl-date"
      args[:start_crawl_date] = argv[i + 1]
      i += 2
    when "--end-crawl-date"
      args[:end_crawl_date] = argv[i + 1]
      i += 2
    when "--include-text"
      args[:include_text] ||= []
      args[:include_text] << argv[i + 1]
      i += 2
    when "--exclude-text"
      args[:exclude_text] ||= []
      args[:exclude_text] << argv[i + 1]
      i += 2
    when "--text"
      args[:text] = true
      i += 1
    when "--text-max-characters"
      args[:text_max_characters] = argv[i + 1].to_i
      i += 2
    when "--include-html-tags"
      args[:include_html_tags] = true
      i += 1
    when "--summary"
      args[:summary] = true
      i += 1
    when "--summary-query"
      args[:summary_query] = argv[i + 1]
      i += 2
    when "--summary-schema"
      schema_arg = argv[i + 1]
      args[:summary_schema] = if schema_arg.start_with?("@")
                               JSON.parse(File.read(schema_arg[1..]))
                             else
                               JSON.parse(schema_arg)
                             end
      i += 2
    when "--context"
      args[:context] = true
      i += 1
    when "--context-max-characters"
      args[:context_max_characters] = argv[i + 1].to_i
      i += 2
    when "--subpages"
      args[:subpages] = argv[i + 1].to_i
      i += 2
    when "--subpage-target"
      args[:subpage_target] ||= []
      args[:subpage_target] << argv[i + 1]
      i += 2
    when "--links"
      args[:links] = argv[i + 1].to_i
      i += 2
    when "--image-links"
      args[:image_links] = argv[i + 1].to_i
      i += 2
    when "--help", "-h"
      puts <<~HELP
        Usage: exa-api search QUERY [OPTIONS]

        Search the web using Exa AI

        Arguments:
          QUERY                 Search query (required)

        Options:
          --num-results N              Number of results to return (default: 10)
          --type TYPE                  Search type: keyword, neural, fast, or auto (default: auto)
          --category CAT               Focus on specific data category
                                       Options: "company", "research paper", "news", "pdf",
                                       "github", "tweet", "personal site", "linkedin profile",
                                       "financial report"
          --include-domains D          Comma-separated list of domains to include
          --exclude-domains D          Comma-separated list of domains to exclude
          --start-published-date DATE  Filter by published date (ISO 8601 format)
          --end-published-date DATE    Filter by published date (ISO 8601 format)
          --start-crawl-date DATE      Filter by crawl date (ISO 8601 format)
          --end-crawl-date DATE        Filter by crawl date (ISO 8601 format)
          --include-text PHRASE        Include results with exact phrase (repeatable)
          --exclude-text PHRASE        Exclude results with exact phrase (repeatable)

        Content Extraction:
          --text                       Include full webpage text
          --text-max-characters N      Max characters for webpage text
          --include-html-tags          Include HTML tags in text extraction
          --summary                    Include AI-generated summary
          --summary-query PROMPT       Custom prompt for summary generation
          --summary-schema FILE        JSON schema for summary structure (@file syntax)
          --context                    Format results as context for LLM RAG
          --context-max-characters N   Max characters for context string
          --subpages N                 Number of subpages to crawl
          --subpage-target PHRASE      Subpage target phrases (repeatable)
          --links N                    Number of links to extract per result
          --image-links N              Number of image links to extract

        General Options:
          --use-autoprompt             Use Exa's autoprompt feature
          --linkedin TYPE              Search LinkedIn: company, person, or all
          --api-key KEY                Exa API key (or set EXA_API_KEY env var)
          --output-format FMT          Output format: json, pretty, or text (default: json)
          --help, -h                   Show this help message

        Examples:
          exa-api search "ruby programming"
          exa-api search "machine learning" --num-results 5 --type keyword
          exa-api search "Latest LLM research" --category "research paper"
          exa-api search "AI startups" --category company
          exa-api search "Anthropic" --linkedin company
          exa-api search "Dario Amodei" --linkedin person
          exa-api search "AI" --linkedin all
          exa-api search "AI research" --include-domains arxiv.org,scholar.google.com
          exa-api search "tutorials" --output-format pretty
      HELP
      exit 0
    else
      query_parts << arg
      i += 1
    end
  end

  args[:query] = query_parts.join(" ")
  args
end

# Build contents parameter from extracted flags
def build_contents(args)
  contents = {}

  # Text options
  if args[:text]
    if args[:text_max_characters] || args[:include_html_tags]
      contents[:text] = {}
      contents[:text][:max_characters] = args[:text_max_characters] if args[:text_max_characters]
      contents[:text][:include_html_tags] = args[:include_html_tags] if args[:include_html_tags]
    else
      contents[:text] = true
    end
  end

  # Summary options
  if args[:summary]
    if args[:summary_query] || args[:summary_schema]
      contents[:summary] = {}
      contents[:summary][:query] = args[:summary_query] if args[:summary_query]
      contents[:summary][:schema] = args[:summary_schema] if args[:summary_schema]
    else
      contents[:summary] = true
    end
  end

  # Context options
  if args[:context]
    if args[:context_max_characters]
      contents[:context] = { max_characters: args[:context_max_characters] }
    else
      contents[:context] = true
    end
  end

  # Subpages options
  contents[:subpages] = args[:subpages] if args[:subpages]
  contents[:subpage_target] = args[:subpage_target] if args[:subpage_target]

  # Extras options
  if args[:links] || args[:image_links]
    contents[:extras] = {}
    contents[:extras][:links] = args[:links] if args[:links]
    contents[:extras][:image_links] = args[:image_links] if args[:image_links]
  end

  contents.empty? ? nil : contents
end

# Main execution
begin
  args = parse_args(ARGV)

  # Validate query
  if args[:query].nil? || args[:query].empty?
    $stderr.puts "Error: Query is required"
    $stderr.puts "Run 'exa-api search --help' for usage information"
    exit 1
  end

  # Resolve API key
  api_key = Exa::CLI::Base.resolve_api_key(args[:api_key])

  # Resolve output format
  output_format = Exa::CLI::Base.resolve_output_format(args[:output_format])

  # Build client
  client = Exa::CLI::Base.build_client(api_key)

  # Prepare search parameters
  search_params = {}
  search_params[:numResults] = args[:num_results] if args[:num_results]
  search_params[:type] = args[:type] if args[:type]
  search_params[:category] = args[:category] if args[:category]
  search_params[:includeDomains] = args[:include_domains] if args[:include_domains]
  search_params[:excludeDomains] = args[:exclude_domains] if args[:exclude_domains]
  search_params[:start_published_date] = args[:start_published_date] if args[:start_published_date]
  search_params[:end_published_date] = args[:end_published_date] if args[:end_published_date]
  search_params[:start_crawl_date] = args[:start_crawl_date] if args[:start_crawl_date]
  search_params[:end_crawl_date] = args[:end_crawl_date] if args[:end_crawl_date]
  search_params[:include_text] = args[:include_text] if args[:include_text]
  search_params[:exclude_text] = args[:exclude_text] if args[:exclude_text]
  contents = build_contents(args)
  search_params.merge!(contents) if contents
  search_params[:useAutoprompt] = args[:use_autoprompt] if args[:use_autoprompt]

  # Execute search based on LinkedIn type
  result = case args[:linkedin]
           when "company"
             client.linkedin_company(args[:query], **search_params)
           when "person"
             client.linkedin_person(args[:query], **search_params)
           when "all"
             client.search(args[:query], includeDomains: ["linkedin.com"], **search_params)
           else
             client.search(args[:query], **search_params)
           end

  # Format and output result
  output = Exa::CLI::Formatters::SearchFormatter.format(result, output_format)
  puts output

rescue Exa::ConfigurationError => e
  $stderr.puts "Configuration error: #{e.message}"
  exit 1
rescue Exa::Unauthorized => e
  $stderr.puts "Authentication error: #{e.message}"
  $stderr.puts "Check your API key (set EXA_API_KEY or use --api-key)"
  exit 1
rescue Exa::ClientError => e
  $stderr.puts "Client error: #{e.message}"
  exit 1
rescue Exa::ServerError => e
  $stderr.puts "Server error: #{e.message}"
  $stderr.puts "The Exa API may be experiencing issues. Please try again later."
  exit 1
rescue Exa::Error => e
  $stderr.puts "Error: #{e.message}"
  exit 1
rescue StandardError => e
  $stderr.puts "Unexpected error: #{e.message}"
  $stderr.puts e.backtrace.first(5) if ENV["DEBUG"]
  exit 1
end
