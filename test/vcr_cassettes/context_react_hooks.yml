---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/context
    body:
      encoding: UTF-8
      string: '{"query":"how to use React hooks for state management","tokensNum":5000}'
    headers:
      X-Api-Key:
      - "<EXA_API_KEY>"
      User-Agent:
      - Faraday v2.14.0
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 28 Oct 2025 16:13:28 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1761668007'
      Etag:
      - W/"5079-D1QN15GMG3FlrEBBowbcz9aG4vI"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=5mwEJIroXmQqddOLaxnDMvM2d5NQTrs2CeAtboOhhrj33k%2FcTf%2BmALD5LnYhCGf9n5CvZ6EASpsHQoxuM0S5LU3XChRo%2BCo8dAd44AZ53gfRvOwDxw%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 995bb86ace937a99-EWR
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 28 Oct 2025 16:13:28 GMT
recorded_with: VCR 6.3.1
