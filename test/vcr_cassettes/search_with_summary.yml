---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/search
    body:
      encoding: UTF-8
      string: '{"query":"climate change","contents":{"summary":{"query":"What are
        the main points about climate change?"}}}'
    headers:
      User-Agent:
      - Faraday v2.14.0
      x-api-key:
      - <EXA_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Oct 2025 03:35:11 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740989'
      X-Ratelimit-Reset:
      - '1760931306'
      Etag:
      - W/"409e-YxI4hjyBfPiLWk23whoRN+WLyQM"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=n0Fa%2BhAUKOQTf0%2FhuR8yKg3Q0Elm%2FTyU2nXJzn1Aj15eRchCkE4%2FpgeKaxcL6e6b13rQjL31SNqMYKHw%2BzjzOw3ACbYt5SnVOSsQi%2BKSvKm%2FmwQ%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 991576906e460f4f-EWR
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 20 Oct 2025 03:35:11 GMT
recorded_with: VCR 6.3.1
