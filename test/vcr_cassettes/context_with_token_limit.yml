---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/context
    body:
      encoding: UTF-8
      string: '{"query":"Express middleware","tokensNum":3000}'
    headers:
      X-Api-Key:
      - "<EXA_API_KEY>"
      User-Agent:
      - Faraday v2.14.0
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 28 Oct 2025 16:13:32 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1761668010'
      Etag:
      - W/"2f5e-mrvDzxZuwJF5MuO0/qRnoHwxuT4"
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=QSHMzgctJ6U7i3ql0TiUguI6RiaHU8xW5P4CXAi%2Fo6C%2FWZEEX5XPLrmNy1UkuMTtVyZqtTMi9swSEtu%2BLNFvrfbJP4w3O9hmlh6rfzevyaP7pWbDIg%3D%3D"}]}'
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 995bb87faaed3788-EWR
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 28 Oct 2025 16:13:32 GMT
recorded_with: VCR 6.3.1
