---
http_interactions:
- request:
    method: post
    uri: https://api.exa.ai/answer
    body:
      encoding: UTF-8
      string: '{"query":"What is the latest valuation of SpaceX?","text":true}'
    headers:
      User-Agent:
      - Faraday v2.14.0
      x-api-key:
      - <EXA_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 19 Oct 2025 18:39:55 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Content-Security-Policy:
      - frame-ancestors 'self'
      Cross-Origin-Opener-Policy:
      - same-origin
      Cross-Origin-Resource-Policy:
      - same-origin
      Origin-Agent-Cluster:
      - "?1"
      Referrer-Policy:
      - no-referrer
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Content-Type-Options:
      - nosniff
      X-Dns-Prefetch-Control:
      - 'off'
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - DENY
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - '0'
      Vary:
      - Origin
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ratelimit-Limit:
      - '9007199254740991'
      X-Ratelimit-Remaining:
      - '9007199254740990'
      X-Ratelimit-Reset:
      - '1760899195'
      Etag:
      - W/"b24a-eQSJ6H03oEJXf9nJBtjvDZTw2+g"
      Cf-Cache-Status:
      - DYNAMIC
      Nel:
      - '{"report_to":"cf-nel","success_fraction":0.0,"max_age":604800}'
      Report-To:
      - '{"group":"cf-nel","max_age":604800,"endpoints":[{"url":"https://a.nel.cloudflare.com/report/v4?s=hYtftITJHHLF4w%2BjGnuJjReP7fD0A5H8apd2l9LsK50GOQMhHNJUwZGLg2lDyQpQBgM7KJHdZ%2BdL1iUESy%2Fwg27XmOzTv9yvd5Cau9t891uh6te7bw%3D%3D"}]}'
      Server:
      - cloudflare
      Cf-Ray:
      - 9912669368ed7a9c-EWR
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 19 Oct 2025 18:39:55 GMT
recorded_with: VCR 6.3.1
